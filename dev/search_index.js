var documenterSearchIndex = {"docs":
[{"location":"methods/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"methods/","page":"Manual","title":"Manual","text":"Modules = [EquiBaryInterp]\nOrder   = [:type, :function]","category":"page"},{"location":"methods/#EquiBaryInterp.BaryPoly","page":"Manual","title":"EquiBaryInterp.BaryPoly","text":"BaryPoly(x, y)\nBaryPoly(x, y, w)\n\nConstructs a barycentric Lagrange polynomial from the data y sampled on x. (See barycentric_weights.)\n\n\n\n\n\n","category":"type"},{"location":"methods/#EquiBaryInterp.LocalEquiBaryInterp","page":"Manual","title":"EquiBaryInterp.LocalEquiBaryInterp","text":"LocalEquiBaryInterp(x::AbstractVector, y::AbstractVector, [degree=8])\nLocalEquiBaryInterp(x::Vector, y::Vector, w::Vector, h⁻¹)\n\nConstruct a local barycentric Lagrange interpolant that forms a degree degree local polynomial approximation of the data y on the equispace grid x, which must be identical to a sorted range with step size h. w are the equispace interpolation weights (see equi_bary_weights). The restrictions on x are that it be a real vector with entries identical to a range and that it be sorted. y can contain any type supporting addition and scalar multiplication.\n\nReturns an interpolant f that can be evaluated at points within extrema(x) using a function syntax f(x).\n\n\n\n\n\n","category":"type"},{"location":"methods/#EquiBaryInterp.bary_kernel-Union{Tuple{T}, Tuple{Any, AbstractVector{T}, Any, Any}} where T","page":"Manual","title":"EquiBaryInterp.bary_kernel","text":"bary_kernel(x, xs, ys, ws)\n\nComputes the value of the barycentric Lagrange polynomial interpolant with nodes xs, values ys, and weights ws at point x.\n\n\n\n\n\n","category":"method"},{"location":"methods/#EquiBaryInterp.barycentric_weights-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Manual","title":"EquiBaryInterp.barycentric_weights","text":"barycentric_weights(x::AbstractVector{T}) where {T<:Real}\n\nComputes barycentric weights for the nodes x.\n\n\n\n\n\n","category":"method"},{"location":"methods/#EquiBaryInterp.equi_bary_weights-Tuple{T} where T<:Integer","page":"Manual","title":"EquiBaryInterp.equi_bary_weights","text":"equi_bary_weights(n::Integer)\n\nComputes barycentric weights for n+1 equispace nodes.\n\n\n\n\n\n","category":"method"},{"location":"methods/#EquiBaryInterp.to_sorted_range-Tuple{AbstractRange}","page":"Manual","title":"EquiBaryInterp.to_sorted_range","text":"to_sorted_range(x::AbstractVector)\n\nAssert that x is numerically identical to an equispace range, and return an equivalent range object.\n\n\n\n\n\n","category":"method"},{"location":"#EquiBaryInterp.jl","page":"Home","title":"EquiBaryInterp.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EquiBaryInterp","category":"page"},{"location":"#EquiBaryInterp","page":"Home","title":"EquiBaryInterp","text":"A package for performing local barycentric Lagrange interpolation of data on equispaced grids using the barycentric interpolation formula in the Berrut and Trefethen (2004) SIAM review. The main routine is LocalEquiBaryInterp.\n\n\n\n\n\n","category":"module"}]
}
